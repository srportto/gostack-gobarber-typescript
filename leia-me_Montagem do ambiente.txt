yarn init -y
yarn add express
yarn add typescript -D
yarn tsc --init         -> criar o arquivo de configuração tsconfig.json do typyscript
Criar a pasta SRC
	criar arquivo: server.ts
        Configurar o arquivo tsconfig.json
                "outdir": "./dist",
		"rootdir": "./src",

        importar o express dentro do arquivo server.ts
        Importar os tipos do express
	yarn add @types/express -D


yarn add ts-node-dev -D  ===> similar ao nodemon só que para codar com typescript


==================================================
Colocar os padronizadores de codigo

   1# editorConfig	==> garante um padrão de codigo entre editores
   2# ESlist		==> automatiza a padronização dentro do codigo, isere de forma automatica pontos e virgulas e afins
		yarn add eslint -D
		yarn eslint --init => starta configuração do eslint
		.eslintignore => criar esse arquivo  na raiz do projeto
		yarn add eslint-import-resolver-typescript -D

   3# prettier 		==>

   seguir tutirial: https://www.notion.so/Padr-es-de-projeto-com-ESLint-Prettier-e-EditorConfig-0b57b47a24724c859c0cf226aa0cc3a7

Src => pasta que possui todo o codigo "core" da aplicação
	models ou entities => pasta(src/model) que fica a estrutura de todo o tipo de dado que precisa ser persistido na aplicação
	routes => pasta(src/routes) que fica todas as rotas da aplicação, inclusive a principal (index) que direciona para todas as outras
		Uma rota deve possuir as seguintes responsabilidades:
			Receber uma requisição, chamar o arquivo que trata aquele tipo de requisição e devolver uma resposta 
	
	repositories => pasta(src/repositories) que fica os arquivos para interação com as bases de dados , normalmente ha um arquivo de repositories para cada um de models
  
		Uma conexão entre a "persistencia de dados" e as rotas, ou seja ...
		persistência <-> repositories <-> rotas(routes)
	  
	service => armazena as regras de negocios da aplicação 
			Como identificar as regras de negocios - os ifs/elses muito especificos 
			Normalmente os arquivos dessa pasta começam com a primeira letra em caixa alta 
			Cada arquivo de service deve possuir uma unica funcionalidade/regra de negocios
	  


DTO - Data transfer object

SOLID
	Referencia: https://www.notion.so/Repository-service-e-patterns-82419cceb11c4c4fbbc055ade7fb1ac5

	S - Sigle responsability principle 
	O - 
	L - 
	I - 
	D - Dependency invertion principle
	

	Separation of Concerns (SoC)
		a arquitetura solftware deve ser moldada pensando em SoC: Separation of Concerns (separação de procupação)
		
	Dependency inversion
		Sempre que minha clase tiver a dependencia de um objeto, ela deve receber este como parametro no construtor 
		
DRY: Don't repeat yourself ==> Não repita regra de negocios





parei em: iniciando-back-end-do-app -> Estratégias de abstração




Estrategia para abstração de dados 
	Driver nativo
	query builder 
		Exemplo: knex.js 
		
	ORM (object Relational Mapping)
		sequeleze (recomendado para javascript puro)
		typeORM (recomendado para typeScript)
			obs.: o orm usa um query builder (knex.js) por baixo 
			
			
			
			
			
			
			
			
			
			
			
==============>> Criar o container do banco de dados da aplicação (postgreSQL)

Para criar um container com a base de dados postgress e direcionar esse acesso para a porta 5432
	
docker run --name gostack_dbpostgres0 -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres

Docker do gostack atual 2021
	CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                    NAMES
	76e32f6a0f8a   postgres   "docker-entrypoint.s…"   38 seconds ago   Up 35 seconds   0.0.0.0:5432->5432/tcp   gostack_dbpostgres0
	
	id inteiro:76e32f6a0f8a5d29410ae9d04dc023f5bf4d33b49d94460b3d6c5263415529e0

	
	
==============>> Criar o arquivo de configuração da ORM 
	1° na raiz do projeto criar o arquivo ormconfig.json

{
    "type": "postgres", 			//tipo do banco de dados 
    "host": "localhost",		
    "port": 5432,
    "username": "postgres",
    "password": "docker",
    "database": "gostack_gobarber",
    "entities": [
        "./src/models/*.ts"
    ],
    "migrations": [
        "./src/database/migrations/*.ts"
    ],
    "cli":{
        "migrationsDir": "./src/database/migrations"
    }

}


adicionar as dependencias typeORM e pg
	yarn add typeorm	obs.: o typeORM possui uma cli 
	yarn add pg ---> obs.: instalação necessaria pois estou usando postgress , se fosse mySQL seria "yarn add mysql"


==============>> Criação da pasta de configuração das interações com o banco de dados 
	- Dentro da pasta SRC criar a pasta "database" 
	- dentro da pasta database criar o arquivo index.ts 
	
==============>> Importar config de banco de dados para aplicação 
	Importar a pasta 'database' para o arquivo 'server.ts' da raiz do projeto 












======================>> adição das sessions 

===> colocando jwt
	yarn add jsonwebtoken
	yarn add @types/jsonwebtoken -D
	
	
	
	
==> yarn  add tsconfig-paths -D
	
	
Usar LIB para injeção de dependencias
	yarn add tsyringe
	
	
Parei em usando controllers
	
	no controler só pode ter os metodos 
		index - Listagem de lançamentos 
		show - para mostrar detalhes de um unico 
		create - criar 
		update - para atualizar **** utilizado apenas para atualizar todas as informações da entidade, se precisar uma atualização parcial ... criar novo controllers ***
		delete - para deletar 
		
		
	

